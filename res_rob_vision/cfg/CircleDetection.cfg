#!/usr/bin/env python
PACKAGE = "res_rob_vision" 

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("DEBUGGING",   bool_t,   0, "Debugging mode on/off",  True)

method_used_enum = gen.enum([ gen.const("GausBlur_and_Erode",      int_t, 0, "A small constant"),
                       gen.const("Blur_and_Threshold",     int_t, 1, "A medium constant"),
                       gen.const("Morph_Opening",      int_t, 2, "A large constant")],
                     "An enum to set size")

gen.add("method", int_t, 0, "What method is used to filter image", 1, 0, 2, edit_method=method_used_enum)
gen.add("threshold_value",   int_t,   0, "'thresh' parameter of threshold. (Only when therhold is enabled", 20, 1, 50)
gen.add("erode_dilate_kernel_size",   int_t,   0, "Size of kernel used in erode", 3, 1, 20)


gen.add("HC_minDist",    int_t,    0, "HoughCircles:  Minimum distance between the centers of the detected circles. If the parameter is too small, multiple neighbor circles may be falsely detected in addition to a true one. If it is too large, some circles may be missed. [processing_video.rows / parameter]", 2,  1, 100)
gen.add("HC_param1",    int_t,    0, "HoughCircles: First method-specific parameter. In case of CV_HOUGH_GRADIENT , it is the higher threshold of the two passed to the Canny() edge detector (the lower one is twice smaller).", 200,  1, 200)
gen.add("HC_param2",    int_t,    0, "HoughCircles: econd method-specific parameter. In case of CV_HOUGH_GRADIENT , it is the accumulator threshold for the circle centers at the detection stage. The smaller it is, the more false circles may be detected. Circles, corresponding to the larger accumulator values, will be returned first.", 90,  1, 200)
gen.add("HC_minRadius",    int_t,    0, "HoughCircles: Minimum circle radius. [processing_video.rows / parameter] ", 10,  1, 50)
gen.add("HC_maxRadius",    int_t,    0, "HoughCircles: Maximum circle radius. [processing_video.rows / parameter]", 2,  1, 10)


# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
# gen.add("my_integer_param",   int_t,   0, "My integer parameter", 267,  0, 500)
# # gen.add("somevariable",   str_t,   0, "My integer parameter", "Hello World")
# # gen.add("someint",   int_t,   0, "My integer parameter", 50,  0, 100)



exit(gen.generate(PACKAGE, "res_rob_vision", "CircleDetection"))