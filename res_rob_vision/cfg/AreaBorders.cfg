#!/usr/bin/env python
PACKAGE = "res_rob_vision" 

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("DEBUGGING",   bool_t,   0, "Debugging mode on/off",  True)

gen.add("color_yellow",   bool_t,   0, "Cut yellow border lines",  True)
gen.add("color_orange",   bool_t,   0, "Cut orange border lines",  True)
gen.add("color_red",   bool_t,   0, "Cut red border lines",  True)

gen.add("HL_threshold",    int_t,    0, "HoughLinesP: Accumulator threshold parameter.", 50,  0, 200)
gen.add("HL_minLineLength",    int_t,    0, "HoughLinesP: Minimum line length. Line segments shorter than that are rejected.", 1,  1, 1000)
gen.add("HL_maxLineGap",    int_t,    0, "HoughLinesP: Maximum allowed gap between points on the same line to link them.", 1,  1, 1000)


# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
# gen.add("my_integer_param",   int_t,   0, "My integer parameter", 267,  0, 500)
# # gen.add("somevariable",   str_t,   0, "My integer parameter", "Hello World")
# # gen.add("someint",   int_t,   0, "My integer parameter", 50,  0, 100)

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")

# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "res_rob_vision", "AreaBorders"))